+---------------------+       +---------------------+       +---------------------+
|     用户浏览器      |       |     后端服务器      |       |        LLM API      |
| (网页应用前端)      | <---> |  (模拟核心 & API)   | <---> |  (事件生成 & 其他)  |
+---------------------+       +---------------------+       +---------------------+
         ^                                |
         |                                |
         |                         +---------------------+
         |                         |    数据库/存储     |
         |                         | (日志记录 & 状态保存) |
         |                         +---------------------+
各层级详细架构：

1. 用户浏览器 (网页应用前端):

这是用户直接与之交互的部分，负责可视化小镇、Agent 和模拟过程，并接收用户输入（如果允许调整参数）。

技术栈：
HTML: 结构骨架。
CSS: 样式和布局。
JavaScript/TypeScript: 实现交互逻辑和与后端通信。
前端框架 (推荐): React, Vue.js, Angular 等，用于构建组件化、可维护的应用。
可视化库 (推荐):
Canvas API 或 SVG: 用于绘制小镇地图、Agent 图标、路径等。
游戏引擎 (更复杂): Phaser, PixiJS 等，如果想要更精细的动画和交互效果。
专门的可视化库: Konva.js (基于 Canvas)、Paper.js (基于 SVG) 等，简化绘图操作。
核心功能模块：
小镇地图渲染： 根据后端提供的数据绘制小镇的布局、地点。
Agent 渲染： 在地图上绘制 Agent 的图标，显示它们的位置、状态（例如，说话时显示对话框）。
实时更新机制： 通过 WebSocket 或 Server-Sent Events (SSE) 从后端接收模拟的实时更新数据。
日志显示区域： 显示每天发生的事件和 Agent 的行动日志。
用户输入界面 (可选): 提供表单或控件，允许用户调整参数（例如，Agent 数量、模拟速度）。
控制按钮： 开始/暂停模拟、重置模拟等。
2. 后端服务器 (模拟核心 & API):

这是整个系统的核心，负责运行 Agent 模拟逻辑、与 LLM 通信、处理用户请求以及向前端推送更新。

技术栈：
后端框架 (推荐):
Python: Django, Flask (适用于 Agent 和 LLM 相关的逻辑，Python 生态丰富)。
Node.js (JavaScript): Express.js, NestJS (适用于实时通信，与前端技术栈一致)。
Java: Spring Boot。
Go: Gin, Echo。
实时通信库 (推荐):
WebSocket 库: Socket.IO (非常流行，跨平台支持好), WebSocket-client/server (基于标准 WebSocket)。
LLM API 客户端库： 使用 LLM 提供商官方提供的客户端库（例如，OpenAI Python Client, Anthropic Python Client）。
核心功能模块：
Agent 管理模块： 创建、存储和管理所有的 Agent 实例，包括它们的属性、状态。
模拟逻辑引擎： 实现模拟的主要循环，处理时间推进，触发事件发生，驱动 Agent 的决策和行动。
事件生成模块： 调用 LLM API 生成随机事件，并将事件广播给相关的 Agent。
Agent 决策模块： 根据Agent的内部状态、感知的事件和其他Agent的行动，驱动每个Agent执行决策逻辑。
** Agent 交互模块：** 管理 Agent 之间的沟通和行动对彼此的影响。
数据记录模块： 记录每天的事件、Agent 的行动和状态变化，存储到数据库或文件中。
API 接口： 提供 RESTful API 或 GraphQL API 供前端调用，例如获取初始小镇状态、开始/暂停模拟。
实时更新推送模块： 通过 WebSocket 或 SSE 向连接的前端推送模拟的实时更新数据（例如，Agent 位置变化、对话内容、新事件发生）。
3. LLM API (事件生成 & 其他):

这是外部服务，负责根据后端发送的 Prompt 生成随机事件。

技术栈： LLM 服务提供商的 API。
核心功能： 接收 Prompt，返回生成的文本内容（随机事件描述、Agent 对话建议等）。
4. 数据库/存储 (日志记录 & 状态保存):

用于持久化存储模拟数据，例如历史日志、小镇的初始配置等。

技术栈：
关系型数据库 (推荐): PostgreSQL, MySQL, SQLite (简单项目)。
NoSQL 数据库: MongoDB (如果数据结构更灵活)。
文件存储: 简单的日志文件。
核心功能：
日志存储： 存储每天的事件、Agent 的行动、对话等详细记录。
小镇状态保存 (可选): 如果需要支持保存和加载模拟进度。
初始配置存储： 存储小镇的布局、初始 Agent 信息等。
工作流程概述：

初始化： 前端加载网页，通过 API 向后端请求初始小镇状态和 Agent 信息。后端从数据库加载数据并返回。
开始模拟： 用户点击“开始”按钮，前端调用后端 API 启动模拟。
模拟循环 (后端):
时间推进（例如，进入新的一天）。
“事件大师”模块调用 LLM API 生成随机事件。
事件广播给相关 Agent。
Agent 决策模块驱动每个 Agent 根据事件和环境做出反应和行动。
Agent 交互模块处理 Agent 之间的互动。
数据记录模块将事件和 Agent 行动记录到数据库。
实时更新推送模块将重要的模拟更新（例如，Agent 位置变化、对话）发送到前端。
实时更新 (前端): 前端通过 WebSocket 或 SSE 接收后端的实时更新数据，并更新网页上的可视化内容和日志显示。
用户交互 (可选): 用户通过界面调整参数，前端调用后端 API 更新模拟设置。
暂停/重置： 用户点击暂停或重置按钮，前端调用后端 API 执行相应操作。

